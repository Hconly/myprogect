------------------------------------------------------------------------
一、mysql表与表之间的关系
------------------------------------------------------------------------
一对多的时候 一个外键
多对多的时候 两个外键
多对多的表之间创建的关系表 一定会有数据重复问题
外键创建的时候有一个参照的母表子表的id根据母表来创建
reference后面的为母表

合并结果集
通过关键字union 可以去重
union all不去重
查询结果合并两个结果集，以临时表的形式展示出来
例子：select * from 表1 union select * from 表2

直接在多个表查询所有信息 会出现笛卡儿积现象 数学概念，相当于一个全组合
例子：select * from 表1，表2；

条件查询
select * from 表1，表2  where 条件1=条件2；
条件1为表1.属性 条件2为表2.属性

内连接（分为等值连接，非等值连接，自连接）
select * from 表1 inner join 表2 on 表1.条件1=表2.条件2；（此处可以添加where条件筛选）
外键保持一致，99查询 
select * from 表1，表2  where 条件1=条件2；
99连接与内等值连接查询结果一致（inner也可以省略）

外连接（左外连接 右外连接）
左连接：select * from 表1 left  join 表2  on 表1.条件1=表2.条件2
右连接：select * from 表1 right  join 表2  on 表1.条件1=表2.条件2

自然连接（连接过程中，要求两个表有相同的列名，相当于把重复列合并）
例子：select * from 表1 natural join 表2；（不用写连接条件）

关于子查询
select 语句里面嵌套另一个select语句
from 后面把查询结果当作一个新表
例子：select 条件1，条件2 from （select 条件1，条件2，条件3 from 表 
where 条件1=值） s where s.字段>值;
where 后面把查询结果当作一个条件值
子查询如果要求多个条件相同时所用的SQL语句
select * from 表 where （条件1，条件2） in （查询结果，另一条查询语句);
另一条语句 如 select * from 表
分组 select 字段 group_concat(字段)，count(字段) from 表 group by 字段 having count（字段）的条件

自连接
查询的时候把同一张表起别名，当作两张不同的表，表的内容实质上是一样的
例子：select * from emp e1,emp e2 where 条件 根据不同的条件来实现连接查询
------------------------------------------------------------------------------------------------------------------
二、MySQL常用函数
------------------------------------------------------------------------------------------------------------------
字符串函数 数值函数 日期和时间函数 流程函数 其他函数

1、字符串函数
concat（str1,str2,...）拼接不同的字符串，任何字符串与null拼接都为null

insert（str,x,y,instr）插入替换 起始位置 替换长度

trim（str) 清空字符串前后空格

repeat（str,x)将指定字符串重复x次

replace（str,a,b)将字符串里面的a全部替换为b

substring(str,x,y)返回字符串当中x位置起y长度的字符串，字符串的截取

lpad(str,n,pad) rpad(str,n,pad)从pad字符串里取一定长度，填充str至n长度

2、数值函数
abs(x)绝对值函数

ceil（x）向上取整 floor(x）向下取整

mod(x,y)返回x/y的模 取余

rand() 返回0-1之间的随机值 ceil(rand()*10) 返回1-10之间的整数

3、日期和时间函数
curdate()返回只包含年月日的日期

curtime()返回只包含时分秒的时间

now()返回包含年月日，时分秒的日期

unix_timestamp()返回当前日期的时间戳

from_unixtime(unixtime)将一个时间戳返回为一个日期

week(date)返回当前日期是一年中的第几周

year（date)返回当前日期是哪一年

hour(time) 返回当前时间的小时

minute(time)返回当前时间的分钟

date_format(date,fmt)按照fmt的样式返回所给的日期值
select date_format(now(),'%M,%D,%Y);其中的一种日期格式
此处日期可以由now()获取

date_add(date,interval,expr types)计算一定间隔后的日期
select date_add(now().interval,3 day)日期在当前基础上添加三天

datediff(date1,date2)计算日期间隔的时长

4、流程函数
if(value,t,f) value 真返回t 否则返回f 
select if(3>2,'3','2')返回3

ifnull(v1,v2) 判断v1，v1不为空返回v1，为空返回v2

case when then end 
select case when 2>3 then '对' else '错' end;

5、其他函数
database();返回当前数据库名称

version() 返回当前数据库版本

user() 返回当前登录的用户名称

password（str) 对str进行加密处理

MD5( ) 返回str的MD5的值
------------------------------------------------------------------------------------------
三、事务操作
------------------------------------------------------------------------------------------
事务的ACID，只针对DML数据操作语言
原子性（Atomicty)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability);

事务 开启事务 事务回滚 事务提交
在事务进行过程中如果出现异常，直接回滚事务，防止意外发生
开启事务 start transaction
回滚事务 rollback
事务提交 commit  

事务并发问题
脏读、不可重复读（两次查询结果返回结果不一样）、重复读、幻读
事务隔离级别
Read uncommitted读未提交
Read committed读提交(可以解决脏读的问题)
set global transaction isloation level read committe;
Repeatable read重复读（mysql默认事务隔离级别，重复读）
（返回的结果一样）
Serializable 串行
对应关系：(是否可以避免事务并发的几种问题)
-------------------------------------------------------------------------
事务隔离级别		|脏读	不可重复读	幻读
--------------------------------------------------------------------------
读未提交(Read uncommitted）     是	        是		  是
不可重复读（Read committed)      否	        是		  是
可重复度(Repeatable read)	    否	        否		  是
串行(Serializable)		    否	        否                       否
--------------------------------------------------------------------------
权限操作
root用户具有所有权限，可以创建用户，并给其他用户赋予权限
create 创建权限
创建一个用户
create user ‘用户名’@‘主机地址’identified by '密码';
删除用户
drop user 用户名称
分配权限
grant 权限(column) on 数据库对象 to 用户 identified by ‘密码’with grant option；
（with grant option 表示可以给其他用户赋予权限）；
grant all privileges on *.* to '用户名'@'主机地址' identified by '密码' with grant option
具体知道图形化界面怎么操作就可以了。
--------------------------------------------------------------------------------------------
五、视图
---------------------------------------------------------------------------------------------
视图是一个虚拟表。其内容由查询定义，和真实表一样，具有行列数据
视图其实就是由select结果集组成的表
1、视图的特性
视图是对于若干基表的引用，是一张虚表，不存储具体数据，数据跟随基表变化而变化
提高数据独立性，提高执行效率
2、创建视图
create view (emp salary view括号内为视图名称） as (select * from emp where sal>2000);
视图里面可以再次创建视图，临时存储筛选数据加as关键字
修改视图
create or replace view 视图名称 as (select  * from 表) 替换原来视图里面的内容
删除视图 drop view 视图名称
创建视图的完整形式
create  algorithm= {undefind | merge（可以替换基表数据） | temptable}view 视图名称(属性清单) as (select 语句 要保存的视图)
with { cascaded | local | check option（更新时检查不符合标准的数据不可更新）}
视图机制 替换式 具化式
3、使用视图
select * from 视图名
-------------------------------------------------------------------------------------------------
六、存储过程
-------------------------------------------------------------------------------------------------
具有一定名字的代码段，可以完成特定的功能
SQL编程
--------------------------------------
编写存储过程：
--------------------------------------
delimiter 修改分隔符
create procedure 名称（）
begin
select 语句
end分隔符
delimiter ；
---------------------------------------
查看存储过程 ：show procedure status;(查看所有数据库)
show procedure status where db='数据库名称'；
show create procedure 存储过程名称（查看存储过程源码）
删除：drop procedure 名称
---------------------------------------------
编写一个存储过程
---------------------------------------------
delimiter 分隔符
create procedure 名称（）
begin

SQL语句
{
declare 变量名称1 变量类型1（长度）,变量名称2 变量类型1（长度）default ' ';
修改变量值（赋值）
1、set 变量名=值；
2、select 字段 into 变量 from 表，（将查询结果赋值给变量select...into 变量名...语句）
变量使用范围 begin - end 之间
存储过程的参数：in out inout三种类型，在创建存储过程中可以给其赋予参数，调用的时候也要传参
调用： call 存储过程名称 (参数)
例子：
delimiter/
create procedure getsal（in name varchar(255),out sal int）
begin 
select salary into sal from emp where ename=name;
end/
delimiter ;
call getsal('鲁班',@s);
select @s from dual;(dual虚拟表)
}
end分隔符
----------------------------------------------
++++++++++++++++++++++++++++++++++++++++++
自定义函数
++++++++++++++++++++++++++++++++++++++
create function 函数名（参数 类型）return 变量名 数据类型
begin
##声明三个变量
declare str varchar(100) default ' A-Za-z';
declare i int default 0;
declare res_str varchar(255) default ' ';
while i < n do
    ##rand()*52+1  随机生成一个数字
    ##floor(rand()*52+1)	 取整
    set res_str = concat(res_str,substr(str, floor(rand()*52+1),1));
    set i = i+1;
end while;  
return res_str;
end;
delimiter;
+++++++++++++++++++++++++++++++++++++++
调用函数：select rand_str(5);
+++++++++++++++++++++++++++++++++++++++
-------------------------------------------------------------------
七、索引
-------------------------------------------------------------------
1、创建索引
explain select * from emp where id =101\G;
解析 一个sql语句 \G 以条目的形式展示
一个表添加主键，自动创建唯一索引
create index 索引名称 on table （column）给某一个字段添加索引
drop index 索引名称 on 表名 删除一个索引

------------------------------------------------------------
其他  |  innodb引擎只支持btree 类型索引
-------------------------------------------------------------
## 需要用到索引的情况#############################
1、频繁的更新的字段不适合创建索引
2、主键自动创建唯一索引
3、查询中与其他表关联的字段，外键建立索引
4、where条件里用不到的字段不创建索引
5、查询中排序的字段，排序的字段通过索引大大提高排序速度
6，查询中统计或者分组字段
 #############################################
##不需要添加索引################################
1、表记录太少
2、经常增删改的表
3、如果某个表有很多重复数据，建立索引没有太大的实际效果
##############################################

数据库存储引擎
ISAM 快速读取 不支持事务 占用资源少
MyISAM 快速读取 不支持事务 占用资源较大 可以通过工具进行数据恢复 但是表信息损坏后无法恢复,数据越多写操作越慢 需要维护索引信息
InnoDB 在MySQL5.5包含5.5以上数据库把版本的默认引擎 支持事务 相对于读取速度低于ISAM MyISAM
存储引擎建立在表的级别
MySQL5.7是Oracle收购MySQL之后发布的第一个完全自定义版本
数据库引擎转换问题要考虑外键问题
select count(*) from 表 需要进行全表扫描







