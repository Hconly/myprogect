-----------------------------------------------------------------------------------------
RESPONSE
------------------------------------------------------------------------------------------
queryRunner  传入参数 数据源
配置文件的加载要用类加载器来写
servletContext  全局上下文对象 只会创建一次  config获取 init方法调用
重定向可以通过响应头设置  setHeader("location","地址")；
response.setHeader("content-type","text/html; chartset=utf-8 ")提前响应浏览器使用的编码格式
response.setContentType("text/html; chartset=utf-8 ")简写

获取路径this.getServletContext().getrealPath()   在context上下文获取
a标签下载传参数用问号

下载告诉浏览器不要解析以附件的形式下载

传参数 中文乱码的解决  先把参数转回二进制以88859-1的形式  再以utf-8编码 如果参数不允许中文修改tomcat 配置文件最后一行 参数=|{}表示接受所有
-------------------------------------------------------------------------------------------
REQUEST
-----------------------------------------------------------------------------------------
getHeaderNames()获取请求头所有信息 返回一个枚举集合
getHeader("参数")获取指定请求头信息
获取refer信息防止网络爬虫 判定请求来源是否是一个合法的url
获取所有的请求参数
getParamterNames() 枚举集合
获取所有参数Map（）getParameterMap()返回key value
发送的参数填入数据库 post请求方式  不需要填入数据库 用get
beanUtil 封装一个form表单获取的所有参数为一个对象
BeanUtils.populate("对象"，参数map)

请求转发  请求一次 地址栏不变
request.getResquestDispatcher("地址").forward(request,response)
重定向 请求两次 地址栏转变 

域对象 可以存储数据的对象 域的特点  可以存储数据  
request 域对象 一次请求的存在 servletContext在整个项目中共享


---------------------------------------------------------------------------------------------------
Cookie 
--------------------------------------------------------------------------------------------------
cookie默认级别为会话级别 打开浏览器关闭浏览器为一次会话级别

session 默认为30分钟  参数在web.xml里面
session 销毁的情况  服务器关闭的时候  timeout=30分钟 手动销毁 


EL表达式
pageContext request session Application四大域
${PageScorp.key}取值
${pageContext.request.contextPath}获取当前项目的路径 动态获取


如何将dao层拿到的数据传入jsp页面    servlet  request.setAttrabuti()存储数据到对应的域
并将数据转发到指定的页面

项目中关于路径的问题 不能写相对路径 只能用绝对路径  服务器中的路径都是相对于webcontent的路经   浏览器端的路径相对于当前jsp的路径
在jsp中路经${pageContext.request.ContextPath}

查询所有
find All
Page<Emp> page= empService.findPage(pageIndex, pageSize, "");
request.setAttribute("page", page);
//跳转页面
request.getRequestDispatcher("Emp.jsp").forward(request, response);

EL表达式 
pageContext 当前页面有效
request 一次请求 转发  有效
session 重定向有效
Application 整个项目

import
session
errorPage
isErrorPage
language
extends
buffer
autoFlush
isThreadSafe
info
isELignored

------------------------------------------------------------------------
include
------------------------------------------------------------------------
<%@ include file="xxx.jsp"%>
引入其他页面的jsp文件，file后面不能跟一个url，必须为一个静态包含

--------------------------------------
标签动作
---------------------------------------
静态包含只会生成一个Java文件，相当于把引入的内容进行复制，只翻译一个servlet出来
动态包含会生成多个Java文件，包含几个生成几个jsp文件
请求转发<jsp forward page="要转发的页面"></jsp forward>

如何执行一个servlet程序
在serve.xml里面
 <Context docBase="Servlet" path="/Servlet" reloadable="true" source="org.eclipse.jst.jee.server:Servlet"/>


此处的path是在浏览器中访问的文件夹名称
docBase 是项目名称  path默认与项目名称一致 可以修改为自己想要的名字


在web.xml里面
<display-name>Servlet</display-name>
  <servlet>
    <servlet-name>My</servlet-name>
    <servlet-class>xxc.servlet.MyServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>My</servlet-name>
    <url-pattern>/First</url-pattern>
  </servlet-mapping>

display-name 
servlet name上下要求一致
url-pattern 的名称跟在path后面才可以访问到servlet中的内容

reloadable 表示只要Java程序的内容发生了变化就会重新加载
url:地址---------》http://localhost:8811/Servlet/First
地址/path(可修改，一般与项目名称相同)/url-pattern(可修改)

servlet
HttpServlet是专门负责处理Http请求的Servlet，以后创建直接使用HttpServlet
Servlet由两个包组成
javax.servlet 和 javax.servlet.http
前者定义了所有servlet的通用接口类
后者定义了http通信有关的servlet接口

HTTP Servlet的方法
service（） 每次发送请求就会调用此方法 写了service方法就不会调用doGet或doPost
doPost() 当发送post请求的时候调用
doGet() 当发送get请求的时候调用

Http servlet容器响应web客户请求的流程

1，web客户端想servlet容器发送HTTP请求
2，servlet 解析用户请求
3，servlet创建HttpRequest对象，对象中封装Http请求信息
4，servlet容器创建HttpResponse 对象
5，servlet容器调用Httpservlet的service方法  将HttpRequest HttpResponse创建的对象作为service方法的参数传递给HTTP Servlet对象
6，HttpServlet调用HTTP Request的有关方法获取Http请求
7，HTTP Servlet调用HTTP Response的有关方法生成响应数据
8，Servlet容器把HTTP Servlet的响应结果传给web客户